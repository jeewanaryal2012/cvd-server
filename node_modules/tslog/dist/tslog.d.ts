/**
 * Expressive TypeScript Logger for Node.js
 * @packageDocumentation
 */


/**
 * Code frame of an error
 * @public
 * */
export declare interface ICodeFrame {
    firstLineNumber: number;
    lineNumber: number;
    columnNumber: number | null;
    linesBefore: string[];
    relevantLine: string;
    linesAfter: string[];
}

/**
 * Object representing an error with a stack trace
 * @public
 */
export declare interface IErrorObject {
    /** Is this object an error? */
    isError: true;
    /** Name of the error*/
    name: string;
    /** Error message */
    message: string;
    /** Stack trace of the error */
    stack: IStackFrame[];
    /** Code frame of the error */
    codeFrame?: ICodeFrame;
}

/**
 * Hex color values for JSON highlighting.
 * @public
 */
export declare interface IJsonHighlightColors {
    number: string;
    key: string;
    string: string;
    boolean: string;
    null: string;
}

/**
 * All possible log levels
 * @public
 */
export declare interface ILogLevel {
    0: "silly";
    1: "trace";
    2: "debug";
    3: "info";
    4: "warn";
    5: "error";
    6: "fatal";
}

/**
 * All relevant information about a log message.
 * @public
 */
export declare interface ILogObject extends IStackFrame {
    /**  Optional name of the instance this application is running on. */
    instanceName?: string;
    /**  Name of the logger or empty string. */
    loggerName: string;
    /**  Timestamp */
    date: Date;
    /**  Log level name (e.g. debug) */
    logLevel: TLogLevelName;
    /**  Log level ID (e.g. 3) */
    logLevelId: TLogLevelId;
    /**  Log arguments */
    argumentsArray: (IErrorObject | unknown)[];
    /**  Optional Log stack trace */
    stack?: IStackFrame[];
}

/**
 * The actual settings object
 * Based on ISettingsParam, however pre-filled with defaults in case no value was provided.
 * @public
 */
export declare interface ISettings extends ISettingsParam {
    instanceName?: string;
    displayInstanceName?: boolean;
    name: string;
    minLevel: TLogLevelName;
    logAsJson: boolean;
    exposeStack: boolean;
    exposeErrorCodeFrame: boolean;
    exposeErrorCodeFrameLinesBeforeAndAfter: number;
    suppressStdOutput: boolean;
    overwriteConsole: boolean;
    logLevelsColors: TLogLevelColor;
    jsonHighlightColors: IJsonHighlightColors;
    stdOut: IStd;
    stdErr: IStd;
}

/**
 * Constructor: logger settings
 * all values are optional and will be pre-filled with default values
 * @public
 */
export declare interface ISettingsParam {
    /** Name of the instance name, default: host name */
    instanceName?: string;
    /** Display instanceName or not, default: false */
    displayInstanceName?: boolean;
    /** Name of the logger instance, default: empty string */
    name?: string;
    /** Minimum output log level (e.g. debug), default: silly */
    minLevel?: TLogLevelName;
    /** Print log as stringified json instead of pretty, default: false */
    logAsJson?: boolean;
    /** Expose stack with EVERY log message, default: false  */
    exposeStack?: boolean;
    /** Get Code Frame of an Error and expose it, default: true */
    exposeErrorCodeFrame?: boolean;
    /** Capture lines before and after a code frame, default: 5 */
    exposeErrorCodeFrameLinesBeforeAndAfter?: number;
    /** Suppress any log output to std out / std err */
    suppressStdOutput?: boolean;
    /** Catch logs going to console (e.g. console.log). Last instantiated Log instance wins */
    overwriteConsole?: boolean;
    /**  Overwrite colors of log messages of different log levels */
    logLevelsColors?: TLogLevelColor;
    /**  Overwrite colors json highlighting */
    jsonHighlightColors?: IJsonHighlightColors;
    /**  Overwrite default std out */
    stdOut?: IStd;
    /**  Overwrite default std err */
    stdErr?: IStd;
}

/**
 * All relevant information about a log message
 * @public
 */
export declare interface IStackFrame {
    /** Relative path based on the main folder */
    filePath: string;
    /** Full path */
    fullFilePath: string;
    /** Name of the file */
    fileName: string;
    /** Line number */
    /** Line number */
    lineNumber: number | null;
    /** Column Name */
    columnNumber: number | null;
    /** Called from constructor */
    isConstructor: boolean | null;
    /** Name of the function */
    functionName: string | null;
    /** Name of the class */
    typeName: string | null;
    /** Name of the Method */
    methodName: string | null;
}

/**
 * StdOut and StdErr have to implement a write function (e.g. Stream)
 * @public
 */
export declare interface IStd {
    /** stream.Writable */
    write: Function;
}

/**
 * üìù Expressive TypeScript Logger for Node.js
 * @public
 */
export declare class Logger {
    private readonly _logLevels;
    private _ignoreStackLevels;
    private _attachedTransports;
    private readonly _minLevelToStdErr;
    /** Readonly settings of the current logger instance. Used for testing. */
    readonly settings: ISettings;
    /**
     * @param settings - Configuration of the logger instance  (all settings are optional with sane defaults)
     */
    constructor(settings?: ISettingsParam);
    /**
     *  Attaches external Loggers, e.g. external log services, file system, database
     *
     * @param transportLogger - External logger to be attached. Must implement all log methods.
     * @param minLevel        - Minimum log level to be forwarded to this attached transport logger. (e.g. debug)
     */
    attachTransport(transportLogger: TTransportLogger<(message: ILogObject) => void>, minLevel?: TLogLevelName): void;
    /**
     * Logs a silly message.
     * @param args  - Multiple log attributes that should be logged out.
     */
    silly(...args: unknown[]): ILogObject;
    /**
     * Logs a trace message.
     * @param args  - Multiple log attributes that should be logged out.
     */
    trace(...args: unknown[]): ILogObject;
    /**
     * Logs a debug message.
     * @param args  - Multiple log attributes that should be logged out.
     */
    debug(...args: unknown[]): ILogObject;
    /**
     * Logs an info message.
     * @param args  - Multiple log attributes that should be logged out.
     */
    info(...args: unknown[]): ILogObject;
    /**
     * Logs a warn message.
     * @param args  - Multiple log attributes that should be logged out.
     */
    warn(...args: unknown[]): ILogObject;
    /**
     * Logs an error message.
     * @param args  - Multiple log attributes that should be logged out.
     */
    error(...args: unknown[]): ILogObject;
    /**
     * Logs a fatal message.
     * @param args  - Multiple log attributes that should be logged out.
     */
    fatal(...args: unknown[]): ILogObject;
    private _handleLog;
    private _buildLogObject;
    private _toStackObjectArray;
    private _printPrettyLog;
    private _printPrettyStack;
    private _printPrettyCodeFrame;
    private _printJsonLog;
}

/**
 * Hex colors of different log levels
 * @public
 */
export declare type TLogLevelColor = {
    [key in TLogLevelId]: string;
};

/**
 * Log level IDs (0 - 6)
 * @public
 */
export declare type TLogLevelId = keyof ILogLevel;

/**
 * Log level names (sill - fatal)
 * @public
 */
export declare type TLogLevelName = ILogLevel[TLogLevelId];

/**
 * List of attached transport logger with their respective min log level.
 * @public
 */
export declare type TTransportLogger<T> = {
    [key in TLogLevelName]: T;
};

export { }
